{
  "openapi": "3.0.3",
  "info": {
    "title": "Haha.ng API",
    "description": "API endpoints for Haha.ng,",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.haha.ng/api/v1",
      "description": "Production Server"
    },
    {
      "url": "http://localhost:5173/api/v1",
      "description": "Local Development Server"
    }
  ],
  "tags": [
    { "name": "System & Public", "description": "General system status and public utilities" },
    { "name": "Webhooks", "description": "Incoming webhook receivers" },
    { "name": "Authentication", "description": "User registration, login, and session management" },
    { "name": "User Profile", "description": "Endpoints for managing the logged-in user's profile and addresses" },
    { "name": "Products & Catalog", "description": "Public product browsing and catalog management" },
    { "name": "Customer Reviews", "description": "Endpoints for customers to manage their product reviews" },
    { "name": "Cart & Wishlist", "description": "Endpoints for managing the user's shopping cart and wishlist" },
    { "name": "Wallet", "description": "Endpoints for managing the user's wallet balance and transactions" },
    { "name": "Orders & Payments", "description": "Endpoints for creating and viewing orders and payments" },
    { "name": "Returns", "description": "Endpoints for managing product return requests" },
    { "name": "Sales Agent", "description": "Endpoints specific to Sales Agent roles (Orders, Returns, Analytics)" },
    { "name": "Admin - Products", "description": "Admin endpoints for managing products" },
    { "name": "Admin - Categories", "description": "Admin endpoints for managing categories" },
    { "name": "Admin - Orders", "description": "Admin endpoints for managing all orders" },
    { "name": "Admin - Payments", "description": "Admin endpoints for managing payments" },
    { "name": "Admin - Returns", "description": "Admin endpoints for managing all returns" },
    { "name": "Admin - Promo Codes", "description": "Admin endpoints for managing promotional codes" },
    { "name": "Admin - Promotions", "description": "Admin endpoints for managing site-wide promotions" },
    { "name": "Admin - Pickup Centers", "description": "Admin endpoints for managing pickup centers and delivery fees" },
    { "name": "Admin - Notifications", "description": "Admin endpoints for sending notifications and managing templates" },
    { "name": "Admin - Content", "description": "Admin endpoints for managing static site content" },
    { "name": "Admin - Users", "description": "Admin endpoints for managing all platform users" },
    { "name": "Admin - Settings", "description": "Admin endpoints for managing system settings" },
    { "name": "Admin - Analytics", "description": "Admin endpoints for viewing platform analytics" },
    { "name": "Admin - AI", "description": "Admin endpoints utilizing AI services" },
    { "name": "Admin - Maintenance", "description": "Admin endpoints for system maintenance tasks" }
  ],
  "paths": {
    "/status": {
      "get": {
        "tags": ["System & Public"],
        "summary": "API Status/Health Check",
        "operationId": "getStatus",
        "responses": {
          "200": { "description": "API is healthy", "content": { "application/json": { "schema": { "type": "object", "properties": { "status": { "type": "string", "example": "ok" } } } } } },
          "503": { "description": "Service Unavailable" }
        }
      }
    },
    "/track": {
      "post": {
        "tags": ["System & Public"],
        "summary": "Track Order/Shipment",
        "description": "Provide tracking ID in the request body to get tracking information.",
        "operationId": "trackOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trackingId": { "type": "string", "description": "The order or shipment tracking ID" }
                },
                "required": ["trackingId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Tracking information found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrackingInfo" } } } },
          "404": { "description": "Tracking ID not found" },
          "400": { "description": "Bad Request (e.g., missing trackingId)" }
        }
      }
    },
    "/webhooks/paystack": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Paystack Payment Webhook",
        "description": "Receives payment status updates from Paystack.",
        "operationId": "handlePaystackWebhook",
        "requestBody": {
          "description": "Payload structure defined by Paystack.",
          "required": true,
          "content": { "application/json": { "schema": { "type": "object" } } }
        },
        "responses": {
          "200": { "description": "Webhook received successfully" },
          "400": { "description": "Invalid payload or signature" }
        }
      }
    },
    "/webhooks/sms": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "SMS Delivery Status Webhook",
        "description": "Receives delivery status updates for sent SMS messages.",
        "operationId": "handleSmsWebhook",
        "requestBody": {
          "description": "Payload structure defined by the SMS provider.",
          "required": true,
          "content": { "application/json": { "schema": { "type": "object" } } }
        },
        "responses": {
          "200": { "description": "Webhook received successfully" },
          "400": { "description": "Invalid payload" }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User Registration",
        "operationId": "registerUser",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRegistrationInput" } } }
        },
        "responses": {
          "201": { "description": "User registered successfully (pending verification)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "400": { "description": "Bad Request (e.g., invalid input, email exists)" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User Login",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserLoginInput" } } }
        },
        "responses": {
          "200": { "description": "Login successful", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "401": { "description": "Unauthorized (Invalid credentials or email not verified)" },
          "400": { "description": "Bad Request (e.g., missing fields)" }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh Authentication Token",
        "description": "Uses a refresh token (typically sent in body or cookie) to get a new access token.",
        "operationId": "refreshToken",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "properties": { "refreshToken": { "type": "string" } }, "required": ["refreshToken"] } } }
        },
        "responses": {
          "200": { "description": "Token refreshed successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "401": { "description": "Unauthorized (Invalid or expired refresh token)" }
        }
      }
    },
    "/auth/verify-email/send": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Send Email Verification Link",
        "description": "Requires user to be logged in or provide email.",
        "operationId": "sendVerificationEmail",
         "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object", "properties": { "email": { "type": "string", "format": "email" } } } } }
        },
        "responses": {
          "200": { "description": "Verification email sent (or resent)" },
          "400": { "description": "Bad Request (e.g., email already verified, user not found)" }
        }
      }
    },
    "/auth/verify-email/{token}": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify Email with Token",
        "operationId": "verifyEmail",
        "parameters": [
          { "name": "token", "in": "path", "required": true, "schema": { "type": "string" }, "description": "The verification token from the email link" }
        ],
        "responses": {
          "200": { "description": "Email verified successfully" },
          "400": { "description": "Bad Request (Invalid or expired token)" }
        }
      }
    },
    "/auth/reset-password/send": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request Password Reset Link",
        "operationId": "requestPasswordReset",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "properties": { "email": { "type": "string", "format": "email" } }, "required": ["email"] } } }
        },
        "responses": {
          "200": { "description": "Password reset email sent if user exists" },
          "400": { "description": "Bad Request (e.g., invalid email format)" }
        }
      }
    },
    "/auth/reset-password/token": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Reset Password using Token",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetInput" } } }
        },
        "responses": {
          "200": { "description": "Password has been reset successfully" },
          "400": { "description": "Bad Request (Invalid/expired token, password mismatch, weak password)" }
        }
      }
    },
    "/auth/oauth/google": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Initiate Google OAuth Login",
        "description": "Redirects the user to Google's OAuth consent screen.",
        "operationId": "oauthGoogleLogin",
        "responses": {
          "302": { "description": "Redirect to Google" }
        }
      }
    },
    "/auth/oauth/google/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Google OAuth Callback Handler",
        "description": "Handles the callback from Google after user consent. Issues tokens.",
        "operationId": "oauthGoogleCallback",
        "responses": {
          "200": { "description": "Login/Registration successful", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "400": { "description": "Error during OAuth flow (e.g., state mismatch, Google error)" },
          "500": { "description": "Internal server error during user processing" }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["User Profile"],
        "summary": "Get Current User Profile",
        "operationId": "getCurrentUserProfile",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": { "description": "User profile data", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "tags": ["User Profile"],
        "summary": "Update User Profile",
        "operationId": "updateCurrentUserProfile",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserProfileUpdateInput" } } }
        },
        "responses": {
          "200": { "description": "Profile updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "400": { "description": "Bad Request (Invalid input)" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "tags": ["User Profile"],
        "summary": "Delete Account / Request Deactivation",
        "operationId": "deleteCurrentUserAccount",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "204": { "description": "Account deleted/deactivation requested successfully" },
          "401": { "description": "Unauthorized" },
          "400": { "description": "Bad Request (e.g., outstanding orders)" }
        }
      }
    },
    "/users/me/password": {
      "put": {
        "tags": ["User Profile"],
        "summary": "Change Password",
        "operationId": "changePassword",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PasswordChangeInput" } } }
        },
        "responses": {
          "204": { "description": "Password changed successfully" },
          "400": { "description": "Bad Request (Incorrect current password, weak new password)" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/me/email": {
      "put": {
        "tags": ["User Profile"],
        "summary": "Request Email Change",
        "operationId": "requestEmailChange",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "properties": { "newEmail": { "type": "string", "format": "email" } }, "required": ["newEmail"] } } }
        },
        "responses": {
          "200": { "description": "Verification email sent to the new address" },
          "400": { "description": "Bad Request (Invalid email, email already in use)" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/me/email/complete": {
      "post": {
        "tags": ["User Profile"],
        "summary": "Complete Email Change Verification",
        "operationId": "completeEmailChange",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "properties": { "token": { "type": "string" } }, "required": ["token"] } } }
        },
        "responses": {
          "200": { "description": "Email changed successfully" },
          "400": { "description": "Bad Request (Invalid or expired token)" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/addresses": {
      "get": {
        "tags": ["User Profile"],
        "summary": "List User Addresses",
        "operationId": "listUserAddresses",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": { "description": "List of user addresses", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Address" } } } } },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "tags": ["User Profile"],
        "summary": "Add New Address",
        "operationId": "addUserAddress",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressInput" } } }
        },
        "responses": {
          "201": { "description": "Address added successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } } },
          "400": { "description": "Bad Request (Invalid input)" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/addresses/{address_id}": {
      "get": {
        "tags": ["User Profile"],
        "summary": "Get Single Address",
        "operationId": "getUserAddress",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "address_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the address" }
        ],
        "responses": {
          "200": { "description": "Address details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } } },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Address not found" }
        }
      },
      "put": {
        "tags": ["User Profile"],
        "summary": "Update Address",
        "operationId": "updateUserAddress",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "address_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the address" }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressInput" } } }
        },
        "responses": {
          "200": { "description": "Address updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } } },
          "400": { "description": "Bad Request (Invalid input)" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Address not found" }
        }
      },
      "delete": {
        "tags": ["User Profile"],
        "summary": "Delete Address",
        "operationId": "deleteUserAddress",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "address_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the address" }
        ],
        "responses": {
          "204": { "description": "Address deleted successfully" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Address not found" }
        }
      }
    },
     "/users/addresses/{address_id}/default": {
        "put": {
            "tags": ["User Profile"],
            "summary": "Set as Default Address",
            "operationId": "setDefaultUserAddress",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "address_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the address to set as default" }
            ],
            "responses": {
                "204": { "description": "Address set as default successfully" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Address not found" }
            }
        }
    },
    "/products": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "List Products",
        "description": "Public endpoint to list products with optional filters, sorting, and pagination.",
        "operationId": "listProducts",
        "parameters": [
          { "name": "category", "in": "query", "schema": { "type": "string" }, "description": "Filter by category slug" },
          { "name": "search", "in": "query", "schema": { "type": "string" }, "description": "Search term" },
          { "name": "sortBy", "in": "query", "schema": { "type": "string", "enum": ["price_asc", "price_desc", "name_asc", "created_at_desc"] }, "description": "Sorting criteria" },
          { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 }, "description": "Page number for pagination" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 }, "description": "Items per page" }
          // Add other relevant filters like price range, brand, etc.
        ],
        "responses": {
          "200": { "description": "List of products", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductListResponse" } } } },
          "400": { "description": "Bad Request (Invalid filter/sort parameters)" }
        }
      }
    },
    "/products/{product_slug}": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get Single Product Details",
        "operationId": "getProductBySlug",
        "parameters": [
          { "name": "product_slug", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Slug of the product" }
        ],
        "responses": {
          "200": { "description": "Product details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } } },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/products/search": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Search Products",
        "operationId": "searchProducts",
         "parameters": [
          { "name": "q", "in": "query", "required": true, "schema": { "type": "string" }, "description": "Search query term" },
          // Add other search filters/pagination similar to listProducts
           { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 }, "description": "Page number for pagination" },
           { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 }, "description": "Items per page" }
        ],
        "responses": {
          "200": { "description": "Search results", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductListResponse" } } } },
          "400": { "description": "Bad Request (Missing query term)" }
        }
      }
    },
    "/products/search/suggestions": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get Search Suggestions",
        "operationId": "getProductSearchSuggestions",
        "parameters": [
          { "name": "q", "in": "query", "required": true, "schema": { "type": "string" }, "description": "Partial search query term" }
        ],
        "responses": {
          "200": { "description": "List of search suggestions", "content": { "application/json": { "schema": { "type": "array", "items": { "type": "string" } } } } },
          "400": { "description": "Bad Request (Missing query term)" }
        }
      }
    },
     "/products/categories": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "List All Categories",
        "operationId": "listCategories",
        "responses": {
          "200": { "description": "List of categories", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Category" } } } } }
        }
      }
    },
    "/products/categories/{category_slug}": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get Category with Products",
        "operationId": "getCategoryBySlug",
        "parameters": [
          { "name": "category_slug", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Slug of the category" }
          // Add pagination/filtering for products within the category if needed
        ],
        "responses": {
          "200": { "description": "Category details and associated products", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryWithProducts" } } } },
          "404": { "description": "Category not found" }
        }
      }
    },
    "/products/{product_slug}/reviews": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get Product Reviews",
        "operationId": "getProductReviews",
         "parameters": [
          { "name": "product_slug", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Slug of the product" },
          { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 }, "description": "Page number" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 }, "description": "Reviews per page" }
        ],
        "responses": {
          "200": { "description": "List of reviews for the product", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Review" } } } } },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/products/featured": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get Featured Products",
        "operationId": "getFeaturedProducts",
        "responses": {
          "200": { "description": "List of featured products", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } } } } }
        }
      }
    },
    "/products/new": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get New Arrivals",
        "operationId": "getNewProducts",
        "responses": {
          "200": { "description": "List of new products", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } } } } }
        }
      }
    },
    "/products/popular": {
      "get": {
        "tags": ["Products & Catalog"],
        "summary": "Get Popular Products",
        "operationId": "getPopularProducts",
        "responses": {
          "200": { "description": "List of popular products", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } } } } }
        }
      }
    },
    "/product/{product_id}/reviews": {
       "post": {
        "tags": ["Customer Reviews"],
        "summary": "Add Product Review",
        "operationId": "addProductReview",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
            { "name": "product_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the product being reviewed" }
        ],
        "requestBody": {
            "required": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReviewInput" } } }
        },
        "responses": {
            "201": { "description": "Review submitted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Review" } } } },
            "400": { "description": "Bad Request (Invalid input, already reviewed, haven't purchased)" },
            "401": { "description": "Unauthorized" },
            "404": { "description": "Product not found" }
        }
      }
    },
    "/product/{product_id}/reviews/{review_id}": {
      "put": {
        "tags": ["Customer Reviews"],
        "summary": "Update Own Review",
        "operationId": "updateProductReview",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "product_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the product" },
          { "name": "review_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the review" }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReviewInput" } } }
        },
        "responses": {
          "200": { "description": "Review updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Review" } } } },
          "400": { "description": "Bad Request (Invalid input)" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden (Not the owner of the review)" },
          "404": { "description": "Review or Product not found" }
        }
      },
      "delete": {
        "tags": ["Customer Reviews"],
        "summary": "Delete Own Review",
        "operationId": "deleteProductReview",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "product_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the product" },
          { "name": "review_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the review" }
        ],
        "responses": {
          "204": { "description": "Review deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden (Not the owner of the review)" },
          "404": { "description": "Review or Product not found" }
        }
      }
    },
    "/cart": {
        "get": {
            "tags": ["Cart & Wishlist"],
            "summary": "Get User Cart",
            "operationId": "getCart",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "Cart details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } } },
                "401": { "description": "Unauthorized" }
            }
        },
        "delete": {
            "tags": ["Cart & Wishlist"],
            "summary": "Clear Cart",
            "operationId": "clearCart",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "204": { "description": "Cart cleared successfully" },
                "401": { "description": "Unauthorized" }
            }
        }
    },
    "/cart/items": {
        "post": {
            "tags": ["Cart & Wishlist"],
            "summary": "Add Item to Cart",
            "operationId": "addCartItem",
            "security": [ { "bearerAuth": [] } ],
            "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CartItemInput" } } }
            },
            "responses": {
                "200": { "description": "Item added/updated in cart", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } } },
                "400": { "description": "Bad Request (Invalid input, product not available)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Product not found" }
            }
        }
    },
    "/cart/items/{item_id}": {
        "put": {
            "tags": ["Cart & Wishlist"],
            "summary": "Update Cart Item Quantity",
            "operationId": "updateCartItem",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "item_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the cart item" }
            ],
             "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": {"quantity": {"type": "integer", "minimum": 1 }}, "required": ["quantity"] } } }
            },
            "responses": {
                "200": { "description": "Cart item updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } } },
                 "400": { "description": "Bad Request (Invalid quantity, insufficient stock)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Cart item not found" }
            }
        },
        "delete": {
            "tags": ["Cart & Wishlist"],
            "summary": "Remove Item from Cart",
            "operationId": "removeCartItem",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "item_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the cart item" }
            ],
            "responses": {
                "200": { "description": "Cart item removed", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } } },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Cart item not found" }
            }
        }
    },
     "/cart/promo-code": {
        "post": {
            "tags": ["Cart & Wishlist"],
            "summary": "Apply Promo Code to Cart",
            "operationId": "applyPromoCode",
            "security": [ { "bearerAuth": [] } ],
            "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "code": { "type": "string" } }, "required": ["code"] } } }
            },
            "responses": {
                "200": { "description": "Promo code applied", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } } },
                "400": { "description": "Bad Request (Invalid/expired code, conditions not met)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Promo code not found" }
            }
        },
        "delete": {
            "tags": ["Cart & Wishlist"],
            "summary": "Remove Promo Code from Cart",
            "operationId": "removePromoCode",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "Promo code removed", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } } },
                "401": { "description": "Unauthorized" }
            }
        }
    },
     "/wishlist": {
        "get": {
            "tags": ["Cart & Wishlist"],
            "summary": "Get User Wishlist",
            "operationId": "getWishlist",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "Wishlist items", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WishlistItem" } } } } },
                "401": { "description": "Unauthorized" }
            }
        }
    },
    "/wishlist/{product_id}": {
        "post": {
            "tags": ["Cart & Wishlist"],
            "summary": "Add Product to Wishlist",
            "operationId": "addWishlistItem",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "product_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the product to add" }
            ],
            "responses": {
                "201": { "description": "Item added to wishlist" },
                "400": { "description": "Bad Request (Item already in wishlist)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Product not found" }
            }
        },
        "delete": {
            "tags": ["Cart & Wishlist"],
            "summary": "Remove Product from Wishlist",
            "operationId": "removeWishlistItem",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "product_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the product to remove" }
            ],
            "responses": {
                "204": { "description": "Item removed from wishlist" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Product not found in wishlist" }
            }
        }
    },
    "/wallet": {
        "get": {
            "tags": ["Wallet"],
            "summary": "Get User Wallet Details",
            "operationId": "getWalletDetails",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "Wallet balance and details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Wallet" } } } },
                "401": { "description": "Unauthorized" }
            }
        }
    },
    "/wallet/generate": {
        "post": {
            "tags": ["Wallet"],
            "summary": "Generate Wallet Address / Initialize",
            "description": "May generate a deposit address or perform initial setup.",
            "operationId": "generateWallet",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "Wallet initialized/address generated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Wallet" } } } },
                "400": { "description": "Bad Request (e.g., already generated)" },
                "401": { "description": "Unauthorized" }
            }
        }
    },
    "/wallet/withdraw": {
        "post": {
            "tags": ["Wallet"],
            "summary": "Request Wallet Withdrawal",
            "operationId": "requestWalletWithdrawal",
            "security": [ { "bearerAuth": [] } ],
            "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WithdrawalInput" } } }
            },
            "responses": {
                "202": { "description": "Withdrawal request accepted for processing" },
                "400": { "description": "Bad Request (Insufficient funds, invalid amount, invalid details)" },
                "401": { "description": "Unauthorized" }
            }
        }
    },
     "/orders": {
        "get": {
            "tags": ["Orders & Payments"],
            "summary": "List User Orders",
            "operationId": "listUserOrders",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
                { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
                { "name": "status", "in": "query", "schema": { "type": "string" }, "description": "Filter by order status" }
            ],
            "responses": {
                "200": { "description": "List of user orders", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrderSummary" } } } } },
                "401": { "description": "Unauthorized" }
            }
        },
        "post": {
            "tags": ["Orders & Payments"],
            "summary": "Create Order from Cart",
            "operationId": "createOrder",
            "security": [ { "bearerAuth": [] } ],
             "requestBody": {
                "description": "May include selected address, shipping options etc.",
                "required": true,
                 "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderCreationInput" } } }
            },
            "responses": {
                "201": { "description": "Order created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
                 "400": { "description": "Bad Request (Cart empty, item out of stock, invalid address)" },
                "401": { "description": "Unauthorized" }
            }
        }
    },
    "/orders/{order_id}": {
        "get": {
            "tags": ["Orders & Payments"],
            "summary": "Get Order Details",
            "operationId": "getOrderDetails",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "order_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the order" }
            ],
            "responses": {
                "200": { "description": "Order details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Order not found" }
            }
        }
    },
    "/orders/{order_id}/cancel": {
        "post": {
            "tags": ["Orders & Payments"],
            "summary": "Request Order Cancellation",
            "operationId": "cancelOrder",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "order_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the order to cancel" }
            ],
            "responses": {
                "202": { "description": "Cancellation request accepted" },
                 "400": { "description": "Bad Request (Order cannot be cancelled - e.g., already shipped)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Order not found" }
            }
        }
    },
    "/payments/{payment_id}": {
        "get": {
            "tags": ["Orders & Payments"],
            "summary": "Get Payment Status",
            "operationId": "getPaymentStatus",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "payment_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the payment (often linked to an order)" }
            ],
            "responses": {
                "200": { "description": "Payment status details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentStatus" } } } },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Payment not found" }
            }
        }
    },
    "/payments/{payment_id}/initialize": {
        "post": {
            "tags": ["Orders & Payments"],
            "summary": "Initialize Payment",
            "description": "Initiates the payment process with the provider (e.g., generates redirect URL or client secret).",
            "operationId": "initializePayment",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "payment_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the payment to initialize" }
            ],
             "requestBody": {
                "description": "May include payment method selection",
                "content": { "application/json": { "schema": { "type": "object" } } }
            },
            "responses": {
                "200": { "description": "Payment initialized successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentInitializationResponse" } } } },
                 "400": { "description": "Bad Request (Payment already processed, invalid state)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Payment not found" }
            }
        }
    },
    "/returns": {
        "get": {
            "tags": ["Returns"],
            "summary": "List User Return Requests",
            "operationId": "listUserReturns",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
                { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } }
            ],
            "responses": {
                "200": { "description": "List of user return requests", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReturnRequestSummary" } } } } },
                "401": { "description": "Unauthorized" }
            }
        },
        "post": {
            "tags": ["Returns"],
            "summary": "Create Return Request",
            "operationId": "createReturnRequest",
            "security": [ { "bearerAuth": [] } ],
             "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnRequestInput" } } }
            },
            "responses": {
                "201": { "description": "Return request created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnRequest" } } } },
                 "400": { "description": "Bad Request (Invalid input, item not eligible for return)" },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Order item not found" }
            }
        }
    },
    "/returns/{return_id}": {
        "get": {
            "tags": ["Returns"],
            "summary": "Get Return Request Details",
            "operationId": "getReturnRequestDetails",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "return_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the return request" }
            ],
            "responses": {
                "200": { "description": "Return request details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnRequest" } } } },
                "401": { "description": "Unauthorized" },
                "404": { "description": "Return request not found" }
            }
        }
    },
     "/sales/analytics/sales": {
        "get": {
            "tags": ["Sales Agent"],
            "summary": "Get Sales Analytics (Sales Agent)",
            "description": "Retrieves sales analytics relevant to the logged-in sales agent.",
            "operationId": "getSalesAgentSalesAnalytics",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                 { "name": "period", "in": "query", "schema": { "type": "string", "enum": ["day", "week", "month", "year"] }, "description": "Time period for analytics" },
                 { "name": "startDate", "in": "query", "schema": { "type": "string", "format": "date" }, "description": "Custom start date" },
                 { "name": "endDate", "in": "query", "schema": { "type": "string", "format": "date" }, "description": "Custom end date" }
            ],
            "responses": {
                "200": { "description": "Sales analytics data", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalyticsData" } } } },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (User does not have Sales Agent role)" }
            }
        }
    },
    "/sales/analytics/summary": {
        "get": {
            "tags": ["Sales Agent"],
            "summary": "Get Sales Agent Dashboard Summary",
            "operationId": "getSalesAgentDashboardSummary",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "Dashboard summary statistics", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DashboardSummary" } } } },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (User does not have Sales Agent role)" }
            }
        }
    },
    "/sales/orders": {
        "get": {
            "tags": ["Sales Agent"],
            "summary": "List Assigned Orders (Sales Agent)",
            "operationId": "listSalesAgentOrders",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                // Add filtering/pagination as needed
                { "name": "status", "in": "query", "schema": { "type": "string" }, "description": "Filter by order status" },
                { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
                { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } }
            ],
            "responses": {
                "200": { "description": "List of assigned orders", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrderSummary" } } } } },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (User does not have Sales Agent role)" }
            }
        }
    },
    "/sales/orders/unassigned": {
        "get": {
            "tags": ["Sales Agent"],
            "summary": "List Unassigned Orders (Sales Agent)",
            "operationId": "listUnassignedOrders",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                // Add filtering/pagination as needed
                { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
                { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } }
            ],
            "responses": {
                "200": { "description": "List of unassigned orders", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrderSummary" } } } } },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (User does not have Sales Agent role)" }
            }
        }
    },
    "/sales/orders/{id}/assign": {
        "post": {
            "tags": ["Sales Agent"],
            "summary": "Assign Order to Self (Sales Agent)",
            "operationId": "assignOrderToSelf",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the order to assign" }
            ],
            "responses": {
                "200": { "description": "Order assigned successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
                 "400": { "description": "Bad Request (Order already assigned)" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (User does not have Sales Agent role)" },
                "404": { "description": "Order not found" }
            }
        }
    },
    "/sales/orders/{id}/notes": {
        "post": {
            "tags": ["Sales Agent"],
            "summary": "Add Order Notes (Sales Agent)",
            "operationId": "addOrderNotesSalesAgent",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the order" }
            ],
            "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "note": { "type": "string" } }, "required": ["note"] } } }
            },
            "responses": {
                "201": { "description": "Note added successfully" },
                "400": { "description": "Bad Request (Empty note)" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Not assigned to order or incorrect role)" },
                "404": { "description": "Order not found" }
            }
        }
    },
    "/sales/orders/{id}/status": {
        "put": {
            "tags": ["Sales Agent"],
            "summary": "Update Order Status (Sales Agent)",
            "operationId": "updateOrderStatusSalesAgent",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the order" }
            ],
             "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "status": { "type": "string", "description": "New order status" } }, "required": ["status"] } } }
            },
            "responses": {
                "200": { "description": "Order status updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
                "400": { "description": "Bad Request (Invalid status transition)" },
                "401": { "description": "Unauthorized" },
                 "403": { "description": "Forbidden (Not assigned to order or incorrect role)" },
                "404": { "description": "Order not found" }
            }
        }
    },
     "/sales/returns": {
        "get": {
            "tags": ["Sales Agent"],
            "summary": "List Returns (Sales Agent)",
            "description": "Lists return requests relevant to the sales agent (e.g., assigned or related to their orders).",
            "operationId": "listSalesAgentReturns",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                 // Add filtering/pagination
                 { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
                 { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } }
            ],
            "responses": {
                "200": { "description": "List of relevant return requests", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReturnRequestSummary" } } } } },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (User does not have Sales Agent role)" }
            }
        }
    },
    "/sales/returns/{return_id}": {
        "get": {
            "tags": ["Sales Agent"],
            "summary": "Get Return Details (Sales Agent)",
            "operationId": "getReturnDetailsSalesAgent",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "return_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the return request" }
            ],
            "responses": {
                "200": { "description": "Return request details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnRequest" } } } },
                "401": { "description": "Unauthorized" },
                 "403": { "description": "Forbidden (Not relevant to agent or incorrect role)" },
                "404": { "description": "Return request not found" }
            }
        }
    },
    "/sales/returns/{return_id}/notes": {
        "post": {
            "tags": ["Sales Agent"],
            "summary": "Add Return Notes (Sales Agent)",
            "operationId": "addReturnNotesSalesAgent",
            "security": [ { "bearerAuth": [] } ],
            "parameters": [
                { "name": "return_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the return request" }
            ],
             "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "note": { "type": "string" } }, "required": ["note"] } } }
            },
            "responses": {
                "201": { "description": "Note added successfully" },
                "400": { "description": "Bad Request (Empty note)" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Not relevant to agent or incorrect role)" },
                "404": { "description": "Return request not found" }
            }
        }
    },
    "/sales/returns/{return_id}/status": {
        "put": {
            "tags": ["Sales Agent"],
            "summary": "Update Return Status (Sales Agent)",
            "operationId": "updateReturnStatusSalesAgent",
            "security": [ { "bearerAuth": [] } ],
             "parameters": [
                { "name": "return_id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "ID of the return request" }
            ],
            "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "status": { "type": "string", "description": "New return status" } }, "required": ["status"] } } }
            },
            "responses": {
                "200": { "description": "Return status updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnRequest" } } } },
                "400": { "description": "Bad Request (Invalid status transition)" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Not relevant to agent or incorrect role)" },
                "404": { "description": "Return request not found" }
            }
        }
    },
     "/admin/ai/analyse-feedback": {
        "post": {
            "tags": ["Admin - AI"],
            "summary": "Analyze Customer Feedback (AI)",
            "operationId": "adminAnalyzeFeedback",
            "security": [ { "bearerAuth": [] } ],
            "requestBody": {
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "feedbackText": { "type": "string" } }, "required": ["feedbackText"] } } }
            },
            "responses": {
                "200": { "description": "Feedback analysis results", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackAnalysis" } } } },
                "400": { "description": "Bad Request" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Admin Only)" },
                "503": { "description": "AI Service unavailable" }
            }
        }
    },
    "/admin/ai/generate-description": {
        "post": {
            "tags": ["Admin - AI"],
            "summary": "Generate Product Description (AI)",
            "operationId": "adminGenerateDescription",
            "security": [ { "bearerAuth": [] } ],
             "requestBody": {
                "description": "Input product details or keywords",
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "productInfo": { "type": "string" } }, "required": ["productInfo"] } } }
            },
            "responses": {
                "200": { "description": "Generated product description", "content": { "application/json": { "schema": { "type": "object", "properties": { "description": { "type": "string" } } } } } },
                 "400": { "description": "Bad Request" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Admin Only)" },
                "503": { "description": "AI Service unavailable" }
            }
        }
    },
    "/admin/ai/generate-tags": {
        "post": {
            "tags": ["Admin - AI"],
            "summary": "Generate Product Tags (AI)",
            "operationId": "adminGenerateTags",
            "security": [ { "bearerAuth": [] } ],
            "requestBody": {
                 "description": "Input product details or description",
                "required": true,
                "content": { "application/json": { "schema": { "type": "object", "properties": { "productInfo": { "type": "string" } }, "required": ["productInfo"] } } }
            },
            "responses": {
                 "200": { "description": "Generated product tags", "content": { "application/json": { "schema": { "type": "object", "properties": { "tags": { "type": "array", "items": {"type": "string"} } } } } } },
                 "400": { "description": "Bad Request" },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Admin Only)" },
                "503": { "description": "AI Service unavailable" }
            }
        }
    },
    "/admin/ai/insights": {
        "get": {
            "tags": ["Admin - AI"],
            "summary": "Get AI-Powered Business Insights",
            "operationId": "adminGetAIInsights",
            "security": [ { "bearerAuth": [] } ],
            "responses": {
                "200": { "description": "AI generated insights", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BusinessInsights" } } } },
                "401": { "description": "Unauthorized" },
                "403": { "description": "Forbidden (Admin Only)" },
                 "503": { "description": "AI Service unavailable or processing" }
            }
        }
    },
    // --- Admin Analytics ---
    "/admin/analytics/customers": { "get": { "tags": ["Admin - Analytics"], "summary": "Customer Analytics", "operationId": "adminGetCustomerAnalytics", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "$ref": "#/components/responses/AnalyticsResponse" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
    "/admin/analytics/inventory": { "get": { "tags": ["Admin - Analytics"], "summary": "Inventory Analytics", "operationId": "adminGetInventoryAnalytics", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "$ref": "#/components/responses/AnalyticsResponse" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
    "/admin/analytics/products": { "get": { "tags": ["Admin - Analytics"], "summary": "Product Performance Analytics", "operationId": "adminGetProductAnalytics", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "$ref": "#/components/responses/AnalyticsResponse" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
    "/admin/analytics/sales": { "get": { "tags": ["Admin - Analytics"], "summary": "Sales Analytics", "operationId": "adminGetSalesAnalytics", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "$ref": "#/components/responses/AnalyticsResponse" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
    "/admin/analytics/summary": { "get": { "tags": ["Admin - Analytics"], "summary": "Dashboard Summary Statistics", "operationId": "adminGetDashboardSummary", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "Admin dashboard summary", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DashboardSummary"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
    "/admin/analytics/users": { "get": { "tags": ["Admin - Analytics"], "summary": "User Analytics", "operationId": "adminGetUserAnalytics", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "$ref": "#/components/responses/AnalyticsResponse" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
    "/admin/analytics/website": { "get": { "tags": ["Admin - Analytics"], "summary": "Website Traffic/Performance Analytics", "operationId": "adminGetWebsiteAnalytics", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "$ref": "#/components/responses/AnalyticsResponse" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } } },
     // --- Admin Categories ---
    "/admin/categories": {
        "get": { "tags": ["Admin - Categories"], "summary": "List Categories (Admin)", "operationId": "adminListCategories", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "List of categories", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Category"}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Categories"], "summary": "Create Category (Admin)", "operationId": "adminCreateCategory", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CategoryInput"}}}}, "responses": { "201": { "description": "Category created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Category"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/categories/{category_id}": {
        "get": { "tags": ["Admin - Categories"], "summary": "Get Category Details (Admin)", "operationId": "adminGetCategory", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/CategoryId"}], "responses": { "200": { "description": "Category details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Category"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Categories"], "summary": "Update Category (Admin)", "operationId": "adminUpdateCategory", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/CategoryId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CategoryInput"}}}}, "responses": { "200": { "description": "Category updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Category"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Categories"], "summary": "Delete Category (Admin)", "operationId": "adminDeleteCategory", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/CategoryId"}], "responses": { "204": { "description": "Category deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" }, "400": {"description": "Bad Request (e.g., category has products)"}} }
    },
     // --- Admin Content ---
    "/admin/content": {
        "get": { "tags": ["Admin - Content"], "summary": "List Static Content Items (Admin)", "operationId": "adminListContent", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "List of content items", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ContentItem"}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Content"], "summary": "Create Static Content Item (Admin)", "operationId": "adminCreateContent", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemInput"}}}}, "responses": { "201": { "description": "Content item created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItem"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/content/{content_id}": {
        "get": { "tags": ["Admin - Content"], "summary": "Get Static Content Item Details (Admin)", "operationId": "adminGetContent", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ContentId"}], "responses": { "200": { "description": "Content item details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItem"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Content"], "summary": "Update Static Content Item (Admin)", "operationId": "adminUpdateContent", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ContentId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemInput"}}}}, "responses": { "200": { "description": "Content item updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItem"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Content"], "summary": "Delete Static Content Item (Admin)", "operationId": "adminDeleteContent", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ContentId"}], "responses": { "204": { "description": "Content item deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- Public Content ---
    "/content/{content_key}": {
        "get": {
            "tags": ["System & Public"],
            "summary": "Get Public Static Content",
            "operationId": "getPublicContent",
            "parameters": [
                { "name": "content_key", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Unique key of the content (e.g., 'about-us')" }
            ],
            "responses": {
                "200": { "description": "Public content", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PublicContentItem" } } } },
                "404": { "description": "Content not found or not public" }
            }
        }
    },
     // --- Admin Logs ---
    "/admin/logs": {
        "get": { "tags": ["Admin - Maintenance"], "summary": "View System Logs (Admin)", "operationId": "adminViewLogs", "security": [ { "bearerAuth": [] } ], "parameters": [/* Add filters for level, time range etc */], "responses": { "200": { "description": "System logs", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/LogEntry"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    // --- Admin Notifications ---
    "/admin/notifications": {
        "post": { "tags": ["Admin - Notifications"], "summary": "Send Notification (Admin)", "operationId": "adminSendNotification", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NotificationSendInput"}}}}, "responses": { "202": { "description": "Notification queued for sending" }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/notifications/templates": {
        "get": { "tags": ["Admin - Notifications"], "summary": "List Notification Templates (Admin)", "operationId": "adminListNotificationTemplates", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "List of templates", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/NotificationTemplate"}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Notifications"], "summary": "Create Notification Template (Admin)", "operationId": "adminCreateNotificationTemplate", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NotificationTemplateInput"}}}}, "responses": { "201": { "description": "Template created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NotificationTemplate"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/notifications/templates/{template_id}": {
        "get": { "tags": ["Admin - Notifications"], "summary": "Get Notification Template Details (Admin)", "operationId": "adminGetNotificationTemplate", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/TemplateId"}], "responses": { "200": { "description": "Template details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NotificationTemplate"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Notifications"], "summary": "Update Notification Template (Admin)", "operationId": "adminUpdateNotificationTemplate", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/TemplateId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NotificationTemplateInput"}}}}, "responses": { "200": { "description": "Template updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/NotificationTemplate"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Notifications"], "summary": "Delete Notification Template (Admin)", "operationId": "adminDeleteNotificationTemplate", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/TemplateId"}], "responses": { "204": { "description": "Template deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- User Notifications ---
    "/notifications": {
        "get": { "tags": ["User Profile"], "summary": "Get User Notifications", "operationId": "getUserNotifications", "security": [ { "bearerAuth": [] } ], "parameters": [/* Pagination? Filter by read/unread? */], "responses": { "200": { "description": "List of notifications", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Notification"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" } } }
    },
    "/notifications/read-all": {
        "put": { "tags": ["User Profile"], "summary": "Mark All Notifications as Read", "operationId": "markAllNotificationsRead", "security": [ { "bearerAuth": [] } ], "responses": { "204": { "description": "All notifications marked as read" }, "401": { "$ref": "#/components/responses/UnauthorizedError" } } }
    },
    "/notifications/{notification_id}/read": {
        "put": { "tags": ["User Profile"], "summary": "Mark Notification as Read", "operationId": "markNotificationRead", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/NotificationId"}], "responses": { "204": { "description": "Notification marked as read" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- Admin Orders ---
    "/admin/orders": {
        "get": { "tags": ["Admin - Orders"], "summary": "List All Orders (Admin)", "operationId": "adminListOrders", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: status, user, date range, Pagination */], "responses": { "200": { "description": "List of all orders", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/OrderSummary"}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/orders/{order_id}": {
        "get": { "tags": ["Admin - Orders"], "summary": "Get Order Details (Admin)", "operationId": "adminGetOrder", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/OrderId"}], "responses": { "200": { "description": "Order details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/orders/{order_id}/assign": {
        "put": { "tags": ["Admin - Orders"], "summary": "Assign Order to Agent (Admin)", "operationId": "adminAssignOrder", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/OrderId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"agentId": {"type": "string"}}, "required": ["agentId"]}}}}, "responses": { "200": { "description": "Order assigned", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/orders/{order_id}/cancel": {
        "post": { "tags": ["Admin - Orders"], "summary": "Cancel Order (Admin)", "operationId": "adminCancelOrder", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/OrderId"}], "responses": { "200": { "description": "Order cancelled", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/orders/{order_id}/refund": {
        "post": { "tags": ["Admin - Orders"], "summary": "Process Order Refund (Admin)", "operationId": "adminRefundOrder", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/OrderId"}], "requestBody": {"description": "May include partial refund amount/items", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefundInput"}}}}, "responses": { "200": { "description": "Refund processed successfully" }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/orders/{order_id}/status": {
        "put": { "tags": ["Admin - Orders"], "summary": "Update Order Status (Admin)", "operationId": "adminUpdateOrderStatus", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/OrderId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string"}}, "required": ["status"]}}}}, "responses": { "200": { "description": "Order status updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Order"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
     // --- Admin Payments ---
    "/admin/payments": {
        "get": { "tags": ["Admin - Payments"], "summary": "List All Payments (Admin)", "operationId": "adminListPayments", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: status, user, date range, order ID, Pagination */], "responses": { "200": { "description": "List of payments", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Payment"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/payments/{payment_id}": {
        "get": { "tags": ["Admin - Payments"], "summary": "Get Payment Details (Admin)", "operationId": "adminGetPayment", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PaymentId"}], "responses": { "200": { "description": "Payment details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/payments/{payment_id}/status": {
        "put": { "tags": ["Admin - Payments"], "summary": "Update Payment Status (Admin)", "operationId": "adminUpdatePaymentStatus", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PaymentId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string"}}, "required": ["status"]}}}}, "responses": { "200": { "description": "Payment status updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Payment"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- Admin Pickup Centers ---
    "/admin/pickup-center": {
        "get": { "tags": ["Admin - Pickup Centers"], "summary": "List Pickup Centers (Admin)", "operationId": "adminListPickupCenters", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "List of pickup centers", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PickupCenter"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Pickup Centers"], "summary": "Create Pickup Center (Admin)", "operationId": "adminCreatePickupCenter", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickupCenterInput"}}}}, "responses": { "201": { "description": "Pickup center created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickupCenter"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
     "/admin/pickup-center/{pickup_center_id}": {
        "get": { "tags": ["Admin - Pickup Centers"], "summary": "Get Pickup Center Details (Admin)", "operationId": "adminGetPickupCenter", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PickupCenterId"}], "responses": { "200": { "description": "Pickup center details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickupCenter"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Pickup Centers"], "summary": "Update Pickup Center (Admin)", "operationId": "adminUpdatePickupCenter", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PickupCenterId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickupCenterInput"}}}}, "responses": { "200": { "description": "Pickup center updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PickupCenter"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Pickup Centers"], "summary": "Delete Pickup Center (Admin)", "operationId": "adminDeletePickupCenter", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PickupCenterId"}], "responses": { "204": { "description": "Pickup center deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/pickup-center/delivery-fees": {
        "get": { "tags": ["Admin - Pickup Centers"], "summary": "Get Delivery Fee Configuration (Admin)", "operationId": "adminGetDeliveryFees", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "Current delivery fee config", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeliveryFeeConfig"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "put": { "tags": ["Admin - Pickup Centers"], "summary": "Update Delivery Fee Configuration (Admin)", "operationId": "adminUpdateDeliveryFees", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeliveryFeeConfigInput"}}}}, "responses": { "200": { "description": "Delivery fee config updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeliveryFeeConfig"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
     // --- Admin Products ---
    "/admin/products": {
        "get": { "tags": ["Admin - Products"], "summary": "List Products (Admin)", "operationId": "adminListProducts", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: category, status, search. Pagination */], "responses": { "200": { "description": "List of products", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductListResponse"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Products"], "summary": "Create Product (Admin)", "operationId": "adminCreateProduct", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductInput"}}}}, "responses": { "201": { "description": "Product created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/products/{product_id}": {
        "get": { "tags": ["Admin - Products"], "summary": "Get Product Details (Admin)", "operationId": "adminGetProduct", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ProductId"}], "responses": { "200": { "description": "Product details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Products"], "summary": "Update Product (Admin)", "operationId": "adminUpdateProduct", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ProductId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProductInput"}}}}, "responses": { "200": { "description": "Product updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Product"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Products"], "summary": "Delete Product (Admin)", "operationId": "adminDeleteProduct", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ProductId"}], "responses": { "204": { "description": "Product deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/products/{product_id}/reviews": {
        "get": { "tags": ["Admin - Products"], "summary": "List Product Reviews (Admin)", "operationId": "adminListProductReviews", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ProductId"} /* + Pagination/Filters */], "responses": { "200": { "description": "List of reviews", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Review"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/products/{product_id}/reviews/{review_id}": {
        "get": { "tags": ["Admin - Products"], "summary": "Get Specific Review (Admin)", "operationId": "adminGetProductReview", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ProductId"}, {"$ref": "#/components/parameters/ReviewId"}], "responses": { "200": { "description": "Review details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Review"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Products"], "summary": "Update/Moderate Review (Admin)", "operationId": "adminUpdateProductReview", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ProductId"}, {"$ref": "#/components/parameters/ReviewId"}], "requestBody": {"description": "Update status (approved/rejected) or content", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReviewUpdateInput"}}}}, "responses": { "200": { "description": "Review updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Review"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
        // Delete might also be needed here for admins
    },
    // --- Admin Promo Codes ---
    "/admin/promo-codes": {
        "get": { "tags": ["Admin - Promo Codes"], "summary": "List Promo Codes (Admin)", "operationId": "adminListPromoCodes", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: status, type. Pagination */], "responses": { "200": { "description": "List of promo codes", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PromoCode"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Promo Codes"], "summary": "Create Promo Code (Admin)", "operationId": "adminCreatePromoCode", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromoCodeInput"}}}}, "responses": { "201": { "description": "Promo code created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromoCode"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/promo-codes/{promo_code_id}": {
        "get": { "tags": ["Admin - Promo Codes"], "summary": "Get Promo Code Details (Admin)", "operationId": "adminGetPromoCode", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PromoCodeId"}], "responses": { "200": { "description": "Promo code details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromoCode"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Promo Codes"], "summary": "Update Promo Code (Admin)", "operationId": "adminUpdatePromoCode", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PromoCodeId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromoCodeInput"}}}}, "responses": { "200": { "description": "Promo code updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromoCode"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Promo Codes"], "summary": "Delete Promo Code (Admin)", "operationId": "adminDeletePromoCode", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PromoCodeId"}], "responses": { "204": { "description": "Promo code deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
     // --- Admin Promotions ---
    "/admin/promotions": {
        "get": { "tags": ["Admin - Promotions"], "summary": "List Promotions (Admin)", "operationId": "adminListPromotions", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: status, type. Pagination */], "responses": { "200": { "description": "List of promotions", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Promotion"}}}}}, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Promotions"], "summary": "Create Promotion (Admin)", "operationId": "adminCreatePromotion", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromotionInput"}}}}, "responses": { "201": { "description": "Promotion created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Promotion"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/promotions/{promotion_id}": {
        "get": { "tags": ["Admin - Promotions"], "summary": "Get Promotion Details (Admin)", "operationId": "adminGetPromotion", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PromotionId"}], "responses": { "200": { "description": "Promotion details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Promotion"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Promotions"], "summary": "Update Promotion (Admin)", "operationId": "adminUpdatePromotion", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PromotionId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromotionInput"}}}}, "responses": { "200": { "description": "Promotion updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Promotion"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Promotions"], "summary": "Delete Promotion (Admin)", "operationId": "adminDeletePromotion", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/PromotionId"}], "responses": { "204": { "description": "Promotion deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- Admin Returns ---
    "/admin/returns": {
        "get": { "tags": ["Admin - Returns"], "summary": "List All Return Requests (Admin)", "operationId": "adminListReturns", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: status, user, date range. Pagination */], "responses": { "200": { "description": "List of return requests", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ReturnRequestSummary"}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/returns/{return_id}": {
        "get": { "tags": ["Admin - Returns"], "summary": "Get Return Request Details (Admin)", "operationId": "adminGetReturn", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ReturnId"}], "responses": { "200": { "description": "Return request details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReturnRequest"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
         "put": { "tags": ["Admin - Returns"], "summary": "Update Return Request Details (Admin)", "description": "Updates details like notes, assigned agent etc.", "operationId": "adminUpdateReturnDetails", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ReturnId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReturnRequestUpdateInput"}}}}, "responses": { "200": { "description": "Return request updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReturnRequest"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/returns/{return_id}/status": {
        "put": { "tags": ["Admin - Returns"], "summary": "Update Return Request Status (Admin)", "description": "Process the return (approve, reject, complete).", "operationId": "adminUpdateReturnStatus", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/ReturnId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string"}}, "required": ["status"]}}}}, "responses": { "200": { "description": "Return status updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReturnRequest"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- Admin Settings ---
    "/admin/settings": {
        "get": { "tags": ["Admin - Settings"], "summary": "Get All System Settings (Admin)", "operationId": "adminGetAllSettings", "security": [ { "bearerAuth": [] } ], "responses": { "200": { "description": "All system settings", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "put": { "tags": ["Admin - Settings"], "summary": "Update Multiple System Settings (Admin)", "operationId": "adminUpdateAllSettings", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}}, "responses": { "200": { "description": "Settings updated", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/settings/{settings_key}": {
        "get": { "tags": ["Admin - Settings"], "summary": "Get Specific Setting Value (Admin)", "operationId": "adminGetSetting", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/SettingsKey"}], "responses": { "200": { "description": "Setting value", "content": {"application/json": {"schema": {"type": "object", "properties": {"value": {}}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Settings"], "summary": "Update Specific Setting Value (Admin)", "operationId": "adminUpdateSetting", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/SettingsKey"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"value": {}}, "required": ["value"]}}}}, "responses": { "200": { "description": "Setting updated", "content": {"application/json": {"schema": {"type": "object", "properties": {"value": {}}}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    // --- Admin Users ---
    "/admin/users": {
        "get": { "tags": ["Admin - Users"], "summary": "List All Users (Admin)", "operationId": "adminListUsers", "security": [ { "bearerAuth": [] } ], "parameters": [/* Filters: role, status, search. Pagination */], "responses": { "200": { "description": "List of users", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/UserAdminView"}}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } },
        "post": { "tags": ["Admin - Users"], "summary": "Create User (Admin)", "operationId": "adminCreateUser", "security": [ { "bearerAuth": [] } ], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminCreateInput"}}}}, "responses": { "201": { "description": "User created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminView"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" } } }
    },
    "/admin/users/{user_id}": {
        "get": { "tags": ["Admin - Users"], "summary": "Get User Details (Admin)", "operationId": "adminGetUser", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/UserId"}], "responses": { "200": { "description": "User details", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminView"}}} }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "put": { "tags": ["Admin - Users"], "summary": "Update User Details (Admin)", "operationId": "adminUpdateUser", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/UserId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminUpdateInput"}}}}, "responses": { "200": { "description": "User updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminView"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } },
        "delete": { "tags": ["Admin - Users"], "summary": "Delete User (Admin)", "operationId": "adminDeleteUser", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/UserId"}], "responses": { "204": { "description": "User deleted" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/users/{user_id}/role": {
        "put": { "tags": ["Admin - Users"], "summary": "Change User Role (Admin)", "operationId": "adminChangeUserRole", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/UserId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"role": {"type": "string"}}, "required": ["role"]}}}}, "responses": { "200": { "description": "User role updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminView"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    },
    "/admin/users/{user_id}/status": {
        "put": { "tags": ["Admin - Users"], "summary": "Activate/Deactivate User (Admin)", "operationId": "adminChangeUserStatus", "security": [ { "bearerAuth": [] } ], "parameters": [{"$ref": "#/components/parameters/UserId"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "enum": ["active", "inactive"]}}, "required": ["status"]}}}}, "responses": { "200": { "description": "User status updated", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserAdminView"}}} }, "400": { "$ref": "#/components/responses/BadRequestError" }, "401": { "$ref": "#/components/responses/UnauthorizedError" }, "403": { "$ref": "#/components/responses/ForbiddenError" }, "404": { "$ref": "#/components/responses/NotFoundError" } } }
    }

  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": { "type": "string", "description": "Error code" },
          "message": { "type": "string", "description": "Detailed error message" },
          "details": { "type": "object", "additionalProperties": true, "description": "Optional additional error details" }
        },
         "required": ["message"]
      },
      "GenericSuccess": {
          "type": "object",
          "properties": {
              "message": { "type": "string", "example": "Operation successful" }
          }
      },
       "UserRegistrationInput": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "format": "password", "minLength": 8 }
        },
        "required": ["firstName", "lastName", "email", "password"]
      },
      "UserLoginInput": {
          "type": "object",
          "properties": {
              "email": { "type": "string", "format": "email" },
              "password": { "type": "string", "format": "password" }
          },
          "required": ["email", "password"]
      },
      "PasswordResetInput": {
          "type": "object",
          "properties": {
              "token": { "type": "string" },
              "newPassword": { "type": "string", "format": "password", "minLength": 8 }
          },
          "required": ["token", "newPassword"]
      },
       "PasswordChangeInput": {
          "type": "object",
          "properties": {
              "currentPassword": { "type": "string", "format": "password" },
              "newPassword": { "type": "string", "format": "password", "minLength": 8 }
          },
          "required": ["currentPassword", "newPassword"]
      },
       "UserProfileUpdateInput": {
           "type": "object",
           "properties": {
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "phone": { "type": "string" }
                // Add other updatable fields
           }
           // No required fields, allowing partial updates
       },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "emailVerified": { "type": "boolean" },
          "role": { "type": "string", "enum": ["customer", "sales-agent", "admin"], "default": "customer" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
          // Add other relevant user fields (phone, avatarUrl etc.)
        }
      },
       "UserAdminView": {
           "allOf": [
                { "$ref": "#/components/schemas/User" },
                {
                    "type": "object",
                    "properties": {
                        "status": {"type": "string", "enum": ["active", "inactive", "pending_verification"]},
                        "lastLoginAt": { "type": "string", "format": "date-time" }
                        // Add other admin-specific viewable fields
                    }
                }
           ]
       },
       "UserAdminCreateInput": {
            "allOf": [
                { "$ref": "#/components/schemas/UserRegistrationInput" },
                {
                    "type": "object",
                    "properties": {
                        "role": {"type": "string", "enum": ["customer", "sales-agent", "admin"]},
                        "status": {"type": "string", "enum": ["active", "inactive"]},
                        "sendWelcomeEmail": {"type": "boolean", "default": true}
                    }
                }
            ]
       },
        "UserAdminUpdateInput": {
            "type": "object",
             "properties": {
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "phone": { "type": "string" },
                "role": {"type": "string", "enum": ["customer", "sales-agent", "admin"]},
                "status": {"type": "string", "enum": ["active", "inactive"]}
                // Add other updatable fields
            }
        },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "accessToken": { "type": "string", "description": "JWT Access Token" },
          "refreshToken": { "type": "string", "description": "JWT Refresh Token" },
          "expiresIn": { "type": "integer", "description": "Access token validity duration in seconds" },
          "user": { "$ref": "#/components/schemas/User" }
        },
        "required": ["accessToken", "user"]
      },
       "AddressInput": {
            "type": "object",
            "properties": {
                "street": { "type": "string" },
                "city": { "type": "string" },
                "state": { "type": "string" },
                "postalCode": { "type": "string" },
                "country": { "type": "string" },
                "addressLabel": { "type": "string", "description": "e.g., Home, Work" },
                "isDefault": { "type": "boolean", "default": false }
            },
             "required": ["street", "city", "state", "postalCode", "country"]
       },
       "Address": {
            "allOf": [
                { "$ref": "#/components/schemas/AddressInput" },
                {
                    "type": "object",
                    "properties": {
                        "id": { "type": "string", "format": "uuid" },
                         "userId": { "type": "string", "format": "uuid" },
                         "createdAt": { "type": "string", "format": "date-time" },
                         "updatedAt": { "type": "string", "format": "date-time" }
                    },
                     "required": ["id", "userId"]
                }
            ]
       },
       "Product": {
           "type": "object",
           "properties": {
               "id": { "type": "string", "format": "uuid" },
               "slug": { "type": "string" },
               "name": { "type": "string" },
               "description": { "type": "string" },
               "price": { "type": "number", "format": "float" },
               "stockQuantity": { "type": "integer" },
               "images": { "type": "array", "items": { "type": "string", "format": "url" } },
               "category": { "$ref": "#/components/schemas/CategorySummary" },
               "tags": { "type": "array", "items": { "type": "string" } },
               "averageRating": { "type": "number", "format": "float", "minimum": 0, "maximum": 5 },
               "reviewCount": { "type": "integer" },
               "isFeatured": { "type": "boolean" },
               "isActive": { "type": "boolean" },
               "createdAt": { "type": "string", "format": "date-time" },
               "updatedAt": { "type": "string", "format": "date-time" }
               // Add variants, specifications etc.
           }
       },
        "ProductInput": {
           "type": "object",
           "properties": {
               "name": { "type": "string" },
               "description": { "type": "string" },
               "price": { "type": "number", "format": "float", "minimum": 0 },
               "stockQuantity": { "type": "integer", "minimum": 0 },
               "categoryId": { "type": "string", "format": "uuid" },
               "images": { "type": "array", "items": { "type": "string", "format": "url" } }, // Or IDs of uploaded images
               "tags": { "type": "array", "items": { "type": "string" } },
               "isFeatured": { "type": "boolean" },
               "isActive": { "type": "boolean", "default": true }
               // Add variants, specifications etc.
           },
           "required": ["name", "price", "stockQuantity", "categoryId"]
       },
       "ProductSummary": {
           "type": "object",
           "properties": {
                "id": { "type": "string", "format": "uuid" },
                "slug": { "type": "string" },
                "name": { "type": "string" },
                "price": { "type": "number", "format": "float" },
                "thumbnailUrl": { "type": "string", "format": "url" },
                 "averageRating": { "type": "number", "format": "float" }
           }
       },
       "ProductListResponse": {
           "type": "object",
           "properties": {
               "data": { "type": "array", "items": { "$ref": "#/components/schemas/ProductSummary" } },
               "pagination": { "$ref": "#/components/schemas/PaginationInfo" }
           }
       },
        "CategorySummary": {
           "type": "object",
           "properties": {
               "id": { "type": "string", "format": "uuid" },
               "slug": { "type": "string" },
               "name": { "type": "string" }
           }
       },
        "Category": {
            "allOf": [
                { "$ref": "#/components/schemas/CategorySummary" },
                {
                    "type": "object",
                    "properties": {
                        "description": { "type": "string" },
                        "parentCategoryId": { "type": "string", "format": "uuid", "nullable": true },
                         "imageUrl": { "type": "string", "format": "url" },
                         "createdAt": { "type": "string", "format": "date-time" },
                         "updatedAt": { "type": "string", "format": "date-time" }
                    }
                }
            ]
       },
        "CategoryInput": {
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "description": { "type": "string" },
                "parentCategoryId": { "type": "string", "format": "uuid", "nullable": true },
                "imageUrl": { "type": "string", "format": "url" }
            },
            "required": ["name"]
        },
        "CategoryWithProducts": {
            "allOf": [
                { "$ref": "#/components/schemas/Category" },
                {
                    "type": "object",
                    "properties": {
                        "products": { "$ref": "#/components/schemas/ProductListResponse" }
                    }
                }
            ]
        },
        "ReviewInput": {
            "type": "object",
            "properties": {
                "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
                "comment": { "type": "string" }
            },
            "required": ["rating"]
        },
        "ReviewUpdateInput": {
            "type": "object",
            "properties": {
                "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
                "comment": { "type": "string" },
                "status": {"type": "string", "enum": ["pending", "approved", "rejected"], "description": "For Admin use"}
            }
        },
        "Review": {
             "allOf": [
                { "$ref": "#/components/schemas/ReviewInput" },
                {
                    "type": "object",
                    "properties": {
                        "id": { "type": "string", "format": "uuid" },
                        "productId": { "type": "string", "format": "uuid" },
                        "userId": { "type": "string", "format": "uuid" },
                        "userName": { "type": "string", "description": "User's display name at time of review"},
                        "status": {"type": "string", "enum": ["pending", "approved", "rejected"]},
                        "createdAt": { "type": "string", "format": "date-time" },
                        "updatedAt": { "type": "string", "format": "date-time" }
                    },
                     "required": ["id", "productId", "userId", "userName", "status"]
                }
            ]
        },
        "CartItemInput": {
            "type": "object",
            "properties": {
                "productId": { "type": "string", "format": "uuid" },
                "quantity": { "type": "integer", "minimum": 1 }
                // Add variantId if applicable
            },
            "required": ["productId", "quantity"]
        },
        "CartItem": {
             "allOf": [
                { "$ref": "#/components/schemas/CartItemInput" },
                {
                    "type": "object",
                    "properties": {
                        "id": { "type": "string", "format": "uuid" },
                        "productName": { "type": "string" },
                        "productSlug": { "type": "string" },
                        "productImage": { "type": "string", "format": "url" },
                        "pricePerUnit": { "type": "number", "format": "float" },
                        "lineTotal": { "type": "number", "format": "float" }
                    },
                     "required": ["id", "productName", "productSlug", "pricePerUnit", "lineTotal"]
                }
            ]
        },
        "Cart": {
            "type": "object",
            "properties": {
                "id": { "type": "string", "format": "uuid" },
                "userId": { "type": "string", "format": "uuid" },
                "items": { "type": "array", "items": { "$ref": "#/components/schemas/CartItem" } },
                "subtotal": { "type": "number", "format": "float" },
                "discount": { "type": "number", "format": "float" },
                "total": { "type": "number", "format": "float" },
                "promoCode": { "type": "string", "nullable": true },
                "createdAt": { "type": "string", "format": "date-time" },
                "updatedAt": { "type": "string", "format": "date-time" }
            }
        },
        "WishlistItem": {
            "type": "object",
            "properties": {
                "productId": { "type": "string", "format": "uuid" },
                "product": { "$ref": "#/components/schemas/ProductSummary" },
                "addedAt": { "type": "string", "format": "date-time" }
            }
        },
         "Wallet": {
            "type": "object",
            "properties": {
                "userId": { "type": "string", "format": "uuid" },
                "balance": { "type": "number", "format": "float" },
                "currency": { "type": "string", "example": "NGN" },
                 "transactions": { "type": "array", "items": { "$ref": "#/components/schemas/WalletTransaction" } } // Optional, could be paginated separately
            }
        },
        "WalletTransaction": { /* Define transaction schema */ "type": "object" },
         "WithdrawalInput": {
            "type": "object",
            "properties": {
                "amount": { "type": "number", "format": "float", "minimum": 0 },
                "bankAccountDetails": { "type": "object" /* Define structure */ }
            },
            "required": ["amount", "bankAccountDetails"]
        },
        "OrderCreationInput": {
            "type": "object",
            "properties": {
                "shippingAddressId": { "type": "string", "format": "uuid" },
                "billingAddressId": { "type": "string", "format": "uuid", "nullable": true },
                "shippingMethodId": { "type": "string" },
                "notes": { "type": "string" }
            },
            "required": ["shippingAddressId", "shippingMethodId"]
        },
         "OrderSummary": {
             "type": "object",
             "properties": {
                 "id": { "type": "string", "format": "uuid" },
                 "orderNumber": { "type": "string" },
                 "status": { "type": "string" },
                 "totalAmount": { "type": "number", "format": "float" },
                 "orderDate": { "type": "string", "format": "date-time" },
                 "itemCount": { "type": "integer" }
             }
         },
         "OrderItem": {
             "type": "object",
             "properties": {
                  "id": { "type": "string", "format": "uuid" },
                  "productId": { "type": "string", "format": "uuid" },
                  "productName": { "type": "string" },
                  "quantity": { "type": "integer" },
                  "pricePerUnit": { "type": "number", "format": "float" },
                  "lineTotal": { "type": "number", "format": "float" }
             }
         },
          "Order": {
            "type": "object",
            "properties": {
                "id": { "type": "string", "format": "uuid" },
                "orderNumber": { "type": "string" },
                "userId": { "type": "string", "format": "uuid" },
                "status": { "type": "string", "enum": ["pending_payment", "processing", "shipped", "delivered", "cancelled", "refunded"]},
                "items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderItem" } },
                "shippingAddress": { "$ref": "#/components/schemas/Address" },
                "billingAddress": { "$ref": "#/components/schemas/Address" },
                "shippingMethod": { "type": "string" },
                "subtotal": { "type": "number", "format": "float" },
                "shippingCost": { "type": "number", "format": "float" },
                "discount": { "type": "number", "format": "float" },
                "tax": { "type": "number", "format": "float" },
                "totalAmount": { "type": "number", "format": "float" },
                "paymentId": { "type": "string", "format": "uuid", "nullable": true },
                "paymentStatus": { "type": "string" },
                "assignedAgentId": { "type": "string", "format": "uuid", "nullable": true },
                 "notes": { "type": "array", "items": {"type": "object", "properties": {"note": {"type": "string"}, "author": {"type": "string"}, "timestamp": {"type": "string", "format": "date-time"}}} },
                "createdAt": { "type": "string", "format": "date-time" },
                "updatedAt": { "type": "string", "format": "date-time" }
            }
        },
         "PaymentStatus": {
             "type": "object",
             "properties": {
                 "id": { "type": "string", "format": "uuid" },
                 "orderId": { "type": "string", "format": "uuid" },
                 "status": { "type": "string", "enum": ["pending", "successful", "failed", "refunded"]},
                 "amount": { "type": "number", "format": "float" },
                 "method": { "type": "string" },
                 "transactionReference": { "type": "string" },
                 "paidAt": { "type": "string", "format": "date-time", "nullable": true },
                 "createdAt": { "type": "string", "format": "date-time" }
             }
         },
         "Payment": {
             "allOf": [
                 { "$ref": "#/components/schemas/PaymentStatus" },
                 { /* Add admin-specific fields if any */ }
             ]
         },
         "PaymentInitializationResponse": {
             "type": "object",
             "properties": {
                 "authorizationUrl": { "type": "string", "format": "url", "description": "URL for redirect-based payments" },
                 "accessCode": { "type": "string", "description": "Access code if needed" },
                 "reference": { "type": "string", "description": "Payment reference" },
                 "clientSecret": { "type": "string", "description": "Client secret for JS SDKs (e.g., Stripe)" }
             }
         },
          "ReturnRequestInput": {
              "type": "object",
              "properties": {
                  "orderItemId": { "type": "string", "format": "uuid" },
                  "reason": { "type": "string" },
                  "quantity": { "type": "integer", "minimum": 1 },
                  "comments": { "type": "string", "nullable": true }
              },
              "required": ["orderItemId", "reason", "quantity"]
          },
           "ReturnRequestUpdateInput": {
              "type": "object",
              "properties": {
                  "status": { "type": "string", "enum": ["pending", "approved", "rejected", "processing", "completed"]},
                  "notes": { "type": "string" },
                  "assignedAgentId": { "type": "string", "format": "uuid", "nullable": true }
              }
          },
          "ReturnRequestSummary": {
              "type": "object",
              "properties": {
                  "id": { "type": "string", "format": "uuid" },
                  "orderNumber": { "type": "string" },
                   "productName": { "type": "string" },
                  "status": { "type": "string" },
                  "requestedAt": { "type": "string", "format": "date-time" }
              }
          },
           "ReturnRequest": {
               "allOf": [
                   { "$ref": "#/components/schemas/ReturnRequestInput" },
                   {
                       "type": "object",
                       "properties": {
                            "id": { "type": "string", "format": "uuid" },
                            "orderId": { "type": "string", "format": "uuid" },
                            "userId": { "type": "string", "format": "uuid" },
                            "status": { "type": "string", "enum": ["pending", "approved", "rejected", "processing", "completed"]},
                            "resolution": { "type": "string", "enum": ["refund", "replace", "store_credit"], "nullable": true },
                            "adminNotes": { "type": "string", "nullable": true },
                            "createdAt": { "type": "string", "format": "date-time" },
                            "updatedAt": { "type": "string", "format": "date-time" }
                       },
                       "required": ["id", "orderId", "userId", "status"]
                   }
               ]
           },
            "RefundInput": {
                "type": "object",
                "properties": {
                    "amount": { "type": "number", "format": "float", "description": "Amount to refund (optional for full refund)"},
                    "reason": { "type": "string" }
                    // Optionally specify items for partial refund
                }
            },
           "PromoCodeInput": {
               "type": "object",
               "properties": {
                   "code": { "type": "string" },
                   "type": { "type": "string", "enum": ["percentage", "fixed_amount"] },
                   "value": { "type": "number", "format": "float" },
                   "description": { "type": "string" },
                   "usageLimit": { "type": "integer", "nullable": true },
                   "minOrderAmount": { "type": "number", "format": "float", "nullable": true },
                   "startDate": { "type": "string", "format": "date-time", "nullable": true },
                   "endDate": { "type": "string", "format": "date-time", "nullable": true },
                    "isActive": { "type": "boolean", "default": true }
                   // Add applicability rules (products, categories, users)
               },
               "required": ["code", "type", "value"]
           },
           "PromoCode": {
                "allOf": [
                    { "$ref": "#/components/schemas/PromoCodeInput" },
                    {
                       "type": "object",
                       "properties": {
                           "id": { "type": "string", "format": "uuid" },
                           "usageCount": { "type": "integer" },
                            "createdAt": { "type": "string", "format": "date-time" },
                            "updatedAt": { "type": "string", "format": "date-time" }
                       },
                       "required": ["id", "usageCount"]
                    }
               ]
           },
           "PromotionInput": { /* Define promotion schema (e.g., banner, discount type, applicability) */ "type": "object", "properties": {"name": {"type": "string"}}, "required": ["name"]},
           "Promotion": { /* Define promotion schema */ "type": "object" },
           "PickupCenterInput": {
               "type": "object",
               "properties": {
                   "name": { "type": "string" },
                   "address": { "$ref": "#/components/schemas/AddressInput" }, // Embed or reference address components
                   "operatingHours": { "type": "string" },
                   "contactPhone": { "type": "string" },
                   "isActive": { "type": "boolean", "default": true }
               },
               "required": ["name", "address"]
           },
           "PickupCenter": {
                "allOf": [
                    { "$ref": "#/components/schemas/PickupCenterInput" },
                    {
                       "type": "object",
                       "properties": {
                           "id": { "type": "string", "format": "uuid" },
                            "createdAt": { "type": "string", "format": "date-time" },
                            "updatedAt": { "type": "string", "format": "date-time" }
                       },
                       "required": ["id"]
                    }
               ]
           },
           "DeliveryFeeConfig": { /* Define schema for delivery fees (e.g., by location, weight) */ "type": "object" },
           "DeliveryFeeConfigInput": { /* Define input schema */ "type": "object" },
            "Notification": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "format": "uuid" },
                    "userId": { "type": "string", "format": "uuid" },
                    "title": { "type": "string" },
                    "message": { "type": "string" },
                    "type": { "type": "string", "enum": ["order_update", "promotion", "system", "message"] },
                    "isRead": { "type": "boolean" },
                    "link": { "type": "string", "format": "url", "nullable": true },
                    "createdAt": { "type": "string", "format": "date-time" }
                }
            },
            "NotificationSendInput": {
                "type": "object",
                "properties": {
                    "userIds": { "type": "array", "items": { "type": "string", "format": "uuid" }, "description": "Specific user IDs to send to (optional)" },
                    "topic": { "type": "string", "description": "Target topic/group (e.g., 'all', 'promo-subscribers') (optional)" },
                    "title": { "type": "string" },
                    "message": { "type": "string" },
                    "type": { "type": "string", "enum": ["promotion", "system", "announcement"] },
                    "link": { "type": "string", "format": "url", "nullable": true },
                    "templateId": { "type": "string", "format": "uuid", "nullable": true, "description": "Use a predefined template (optional)"}
                },
                "required": ["title", "message", "type"] // Need either userIds or topic
            },
             "NotificationTemplateInput": {
                "type": "object",
                "properties": {
                    "name": { "type": "string" },
                    "subject": { "type": "string" },
                    "body": { "type": "string", "description": "Template body with placeholders (e.g., {{firstName}})" },
                    "type": { "type": "string", "enum": ["email", "sms", "push", "in_app"] }
                },
                "required": ["name", "subject", "body", "type"]
            },
             "NotificationTemplate": {
                "allOf": [
                    { "$ref": "#/components/schemas/NotificationTemplateInput" },
                    {
                        "type": "object",
                        "properties": {
                            "id": { "type": "string", "format": "uuid" },
                            "createdAt": { "type": "string", "format": "date-time" },
                            "updatedAt": { "type": "string", "format": "date-time" }
                        },
                         "required": ["id"]
                    }
                ]
            },
             "ContentItemInput": {
                 "type": "object",
                 "properties": {
                     "key": { "type": "string", "description": "Unique key (e.g., 'about-us')" },
                     "title": { "type": "string" },
                     "body": { "type": "string", "description": "HTML or Markdown content" },
                     "isPublic": { "type": "boolean", "default": true }
                 },
                 "required": ["key", "title", "body"]
             },
             "ContentItem": {
                 "allOf": [
                    { "$ref": "#/components/schemas/ContentItemInput" },
                    {
                        "type": "object",
                        "properties": {
                            "id": { "type": "string", "format": "uuid" },
                            "createdAt": { "type": "string", "format": "date-time" },
                            "updatedAt": { "type": "string", "format": "date-time" }
                        },
                         "required": ["id"]
                    }
                ]
             },
             "PublicContentItem": {
                 "type": "object",
                 "properties": {
                      "key": { "type": "string" },
                     "title": { "type": "string" },
                     "body": { "type": "string" },
                      "updatedAt": { "type": "string", "format": "date-time" }
                 }
             },
            "AnalyticsData": { /* Define structure for analytics responses */ "type": "object" },
            "DashboardSummary": { /* Define structure for dashboard summaries */ "type": "object" },
            "FeedbackAnalysis": { /* Define structure for AI feedback analysis */ "type": "object" },
            "BusinessInsights": { /* Define structure for AI business insights */ "type": "object" },
            "LogEntry": { /* Define structure for log entries */ "type": "object" },
             "PaginationInfo": {
                 "type": "object",
                 "properties": {
                     "currentPage": { "type": "integer" },
                     "totalPages": { "type": "integer" },
                     "pageSize": { "type": "integer" },
                     "totalItems": { "type": "integer" },
                     "hasNextPage": { "type": "boolean" },
                     "hasPreviousPage": { "type": "boolean" }
                 }
             },
             "TrackingInfo": { /* Define structure for tracking info */ "type": "object" }

    },
    "parameters": {
        "CategoryId": { "name": "category_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the category" },
        "ContentId": { "name": "content_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the content item" },
        "NotificationId": { "name": "notification_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the notification" },
        "TemplateId": { "name": "template_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the notification template" },
        "OrderId": { "name": "order_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the order" },
        "SalesOrderId": { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the order (used in sales agent paths)" },
        "PaymentId": { "name": "payment_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the payment" },
        "PickupCenterId": { "name": "pickup_center_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the pickup center" },
        "ProductId": { "name": "product_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the product" },
        "ReviewId": { "name": "review_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the review" },
        "PromoCodeId": { "name": "promo_code_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the promo code" },
        "PromotionId": { "name": "promotion_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the promotion" },
        "ReturnId": { "name": "return_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the return request" },
        "SettingsKey": { "name": "settings_key", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Key of the system setting" },
        "UserId": { "name": "user_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" }, "description": "ID of the user" }
    },
    "responses": {
       "UnauthorizedError": {
            "description": "Unauthorized - Authentication required or token invalid.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
        },
        "ForbiddenError": {
            "description": "Forbidden - User does not have permission for this action (e.g., Admin only).",
             "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
        },
        "NotFoundError": {
            "description": "Not Found - The requested resource does not exist.",
             "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
        },
        "BadRequestError": {
            "description": "Bad Request - Invalid input data provided.",
             "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
        },
        "AnalyticsResponse": {
             "description": "Analytics data",
             "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalyticsData" } } }
        }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authentication using Bearer token"
      },
       "googleOAuth": {
           "type": "oauth2",
           "description": "Google OAuth2 Authentication",
           "flows": {
               "authorizationCode": {
                   "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
                   "tokenUrl": "https://oauth2.googleapis.com/token",
                   "scopes": {
                       "openid": "OpenID Connect scope",
                       "email": "Read user's email address",
                       "profile": "Read user's basic profile info"
                    }
               }
           }
       }
    }
  },
  "security": [
    // Default security for most endpoints - override with `security: []` for public ones.
    // { "bearerAuth": [] } // Uncomment if most endpoints require auth by default
  ]
}